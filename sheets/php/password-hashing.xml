<?xml version="1.0"?>

<sheet xmlns="http://overdocs.net/overdocs">
    <title>Hashing passwords</title>
    <summary>How to safely hash strings in PHP.</summary>
    <cheat title="Introduction" id="introduction">
        <p>
            Hashing passwords in proper way is crucial for application security. You should always be
            prepared for possible database leak. Luckily, since PHP 5.3.7 we can utilize a very convenient
            set of functions: either built into PHP or using a compatibility library.
        </p>
    </cheat>

    <cheat title="PHP core functions" id="core" version="PHP 5.5+">
        <p>
            Under at least PHP 5.5 you don't need to perform any additional steps as
            <code>password_*</code> functions are available by default.
        </p>
    </cheat>

    <cheat title="Compatibility library" id="compat" version="PHP 5.3.7+">
        <p>
            Since <code>password_*</code> functions are just friendlier wrappers for existing
            ones, you can use pure PHP implementation for PHP versions greater than 5.3.7 and
            lower than 5.5.
        </p>
        <p>
            The library was made by one of the developers of PHP. You can download it from
            <link href="https://github.com/ircmaxell/password_compat">GitHub</link> or install
            using <link href="https://packagist.org/packages/ircmaxell/password-compat">Composer</link>.
        </p>
    </cheat>

    <cheat title="Basic operations" id="operations">
        <p>
            The following code listing shows basic operations on passwords and their hashes:
        </p>
        <snippet language="php">
<![CDATA[<?php
// Hashing string using default algorithm
echo password_hash('secret', PASSWORD_DEFAULT);

// Hashing password using bcrypt and setting additional options
$options = array(
    'cost' => 10,      // See the section below to learn more about setting cost
    'salt' => 'custom' // Use your own salt instead of automatically generated one
);

echo password_hash('secret', PASSWORD_BCRYPT, $options);

// Verifying if the password matches a hash
if (password_verify('secret', $hash)) {
    echo 'Password is valid';
} else {
    echo 'Password is invalid';
}]]>
        </snippet>
        <warning>
            <p>
                When comparing hash with a password, you should always use <code>password_verify()</code>,
                not a regular comparison operator. It prevents from <em>timing attacks</em>.
            </p>
        </warning>
        <note>
            <p>
                The default algorithm at the moment is bcrypt but it may be changed in the future - that's
                what <code>PASSWORD_DEFAULT</code> was created for. In most cases it provides the strongest
                and safest algorithm currently available.
            </p>
        </note>
    </cheat>

    <cheat title="Finding optimal bcrypt cost" id="bcrypt-cost">
        <p>
            When using bcrypt, you can set a <em>hashing cost</em>, like it was shown in code above. The
            bigger the cost, the longer the strongness of hash and resource usage.
        </p>
        <p>
            Therefore you should calculate the optimal cost, which depends on capabilites of your server.
        </p>
        <snippet language="php">
<![CDATA[<?php
// Desired hashing time in seconds
$timeTarget = 0.05;

// Start from 8 - it is good baseline, but we might afford to use higher cost
$cost = 8;
do {
    $cost++;
    $start = microtime(true);
    password_hash('test', PASSWORD_BCRYPT, array('cost' => $cost));
    $end = microtime(true);
} while (($end - $start) < $timeTarget);

echo "Optimal cost found: $cost\n";]]>
        </snippet>
        <note>
            <p>
                Default value for <code>cost</code> is <em>10</em>.
            </p>
        </note>
    </cheat>

    <learn-more>
        <link href="http://php.net/manual/en/book.password.php">Password hashing in PHP manual</link>
        <link href="http://en.wikipedia.org/wiki/Timing_attack">Timing attacks</link>
    </learn-more>

    <keywords>
        <keyword>php</keyword>
        <keyword>hashing</keyword>
        <keyword>password</keyword>
        <keyword>bcrypt</keyword>
        <keyword>security</keyword>
    </keywords>
</sheet>
